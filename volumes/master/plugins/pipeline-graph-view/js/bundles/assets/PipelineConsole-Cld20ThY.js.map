{"version":3,"mappings":"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","names":["Dropdown","items","disabled","className","visible","useState","show","Tooltip","jsx","hide","DefaultDropdownProps","item","index","isValidElement","dropdownItem","jsxs","DropdownPortal","container","createPortal","children","Skeleton","height","StagesCustomization","setMainViewVisibility","isMobile","e","setStageViewPosition","Fragment","ViewIcon","mainViewVisibility","MainViewVisibility","handleViewChange","stageViewPosition","StageViewPosition","visibleStatuses","resetStatuses","statuses","Result","setVisible","Tippy","classNames","toggleStatus","allVisible","DataTreeView","stages","selected","onNodeSelect","search","filteredStages","handleSelect","useCallback","nodeId","setSearch","Filter","stage","TreeNode","memo","onSelect","hasChildren","isExpanded","setIsExpanded","handleToggleClick","useEffect","filterStageTree","isSelected","Total","child","filteredChildren","LOG_FETCH_SIZE","props","run","loading","expandedSteps","steps","userManuallySetNode","setUserManuallySetNode","stepsRef","useRef","updateStepConsoleOffset","stepId","forceUpdate","startByte","stepBuffers","stepBuffer","getConsoleTextOffset","newLogLines","setStepBuffers","prev","params","step","s","expanded","setExpandedSteps","getDefaultSelectedStep","selectedStep","stepResult","selectedStepResult","defaultStep","startPollingPipeline","setOpenStage","hasNewSteps","data","POLL_INTERVAL","error","handleStageSelect","stepsForStage","lastStep","id","getStageSteps","stageId","buffers","result","findStage","openStage","onMoreConsoleClick","checkComplete","getStateUpdateFn","onData","resolve","interval","polling","ConsoleLogStream","lazy","__vitePreload","fetchData","getConsoleBuildOutput","consoleBuildOutput","NoStageStepsFallback","setLogBuffer","err","logBuffer","ScrollToTopBottom","isScrollable","updateScrollState","scrollTop","windowHeight","atBottom","scrollable","docHeight","setIsAtTop","setIsAtBottom","setIsScrollable","distanceFromBottom","offset","observer","scrollToTop","scrollToBottom","isAtTop","isAtBottom","SplitView","setTreeViewWidth","setStageViewHeight","stageViewWidth","stageViewHeight","useLayoutPreferences","direction","isVertical","initialSize","storageKey","treeViewWidth","startDragging"],"ignoreList":[],"sources":["../../../../frontend/common/components/dropdown.tsx","../../../../frontend/common/components/dropdown-portal.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/skeleton.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/stages-customization.tsx","../../../../frontend/common/components/filter.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsoleModel.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/hooks/use-steps-poller.ts","../../../../frontend/pipeline-console-view/pipeline-console/main/NoStageStepsFallback.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/scroll-to-top-bottom.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/split-view.tsx"],"sourcesContent":["import Tippy, { TippyProps } from \"@tippyjs/react\";\nimport { isValidElement, ReactElement, ReactNode, useState } from \"react\";\n\nimport Tooltip from \"./tooltip.tsx\";\n\n/**\n * A customized (and customizable) implementation of Tippy dropdowns\n */\nexport default function Dropdown({\n  items,\n  disabled,\n  className,\n}: DropdownProps) {\n  const [visible, setVisible] = useState(false);\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"More actions\"}>\n      <Tippy\n        visible={visible}\n        onClickOutside={hide}\n        {...DefaultDropdownProps}\n        content={\n          <div className=\"jenkins-dropdown\">\n            {items.map((item, index) => {\n              if (item === \"separator\") {\n                return (\n                  <div\n                    key={`separator-${index}`}\n                    className=\"jenkins-dropdown__separator\"\n                  />\n                );\n              }\n\n              if (isValidElement(item)) {\n                return (\n                  <div key={index} className=\"jenkins-dropdown__custom-item\">\n                    {item}\n                  </div>\n                );\n              }\n\n              const dropdownItem = item as DropdownItem;\n              return (\n                <a\n                  key={index}\n                  className=\"jenkins-dropdown__item\"\n                  href={dropdownItem.href}\n                  target={dropdownItem.target}\n                  download={dropdownItem.download}\n                >\n                  <div className=\"jenkins-dropdown__item__icon\">\n                    {dropdownItem.icon}\n                  </div>\n                  {dropdownItem.text}\n                </a>\n              );\n            })}\n          </div>\n        }\n      >\n        <button\n          className={\"jenkins-button \" + className}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n        >\n          <div className=\"jenkins-overflow-button__ellipsis\">\n            <span />\n            <span />\n            <span />\n          </div>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\nexport const DefaultDropdownProps: TippyProps = {\n  theme: \"dropdown\",\n  duration: 250,\n  touch: true,\n  animation: \"dropdown\",\n  interactive: true,\n  offset: [0, 0],\n  placement: \"bottom-start\",\n  arrow: false,\n};\n\ninterface DropdownProps {\n  items: (DropdownItem | ReactElement | \"separator\")[];\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface DropdownItem {\n  text: string;\n  href?: string;\n  icon: ReactNode;\n  target?: string;\n  download?: string;\n}\n","import { ReactNode } from \"react\";\nimport { createPortal } from \"react-dom\";\n\ninterface DropdownPortalProps {\n  children: ReactNode;\n}\n\nexport default function DropdownPortal({ children }: DropdownPortalProps) {\n  const container = document.getElementById(\"console-pipeline-overflow-root\");\n\n  if (!container) {\n    console.error(\"DropdownPortal: Target container not found!\");\n    return null;\n  }\n\n  return createPortal(children, container);\n}\n","import \"./skeleton.scss\";\n\nexport default function Skeleton({ height }: { height?: number }) {\n  return (\n    <div\n      className={\"pgv-skeleton\"}\n      style={\n        height\n          ? {\n              height: `${height}rem`,\n            }\n          : {}\n      }\n    />\n  );\n}\n","import \"./stages-customization.scss\";\n\nimport { ChangeEvent } from \"react\";\n\nimport {\n  MainViewVisibility,\n  StageViewPosition,\n  useLayoutPreferences,\n} from \"../providers/user-preference-provider.tsx\";\n\nexport default function StagesCustomization() {\n  const {\n    mainViewVisibility,\n    setMainViewVisibility,\n    stageViewPosition,\n    setStageViewPosition,\n    isMobile,\n  } = useLayoutPreferences();\n\n  if (isMobile) {\n    return null;\n  }\n\n  const handleViewChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setMainViewVisibility(e.target.value as MainViewVisibility);\n  };\n\n  const handlePositionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setStageViewPosition(e.target.value as StageViewPosition);\n  };\n\n  return (\n    <>\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"main-view-visibility\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <ViewIcon\n            mainViewVisibility={mainViewVisibility}\n            stageViewPosition={stageViewPosition}\n          />\n        </div>\n        Views\n        <span>\n          {mainViewVisibility === MainViewVisibility.BOTH && \"Graph and stages\"}\n          {mainViewVisibility === MainViewVisibility.GRAPH_ONLY && \"Graph\"}\n          {mainViewVisibility === MainViewVisibility.STAGES_ONLY && \"Stages\"}\n        </span>\n        <select\n          id=\"main-view-visibility\"\n          value={mainViewVisibility}\n          onChange={handleViewChange}\n        >\n          <option value={MainViewVisibility.BOTH}>Graph and stages</option>\n          <option value={MainViewVisibility.GRAPH_ONLY}>Graph</option>\n          <option value={MainViewVisibility.STAGES_ONLY}>Stages</option>\n        </select>\n      </label>\n\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"stage-view-position\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <circle\n              cx=\"128\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <circle\n              cx=\"256\"\n              cy=\"416\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n              d=\"M256 256v112\"\n            />\n            <circle\n              cx=\"384\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M128 144c0 74.67 68.92 112 128 112M384 144c0 74.67-68.92 112-128 112\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n          </svg>\n        </div>\n        Graph position\n        <span>\n          {stageViewPosition === StageViewPosition.TOP ? \"Top\" : \"Left\"}\n        </span>\n        <select\n          id=\"stage-view-position\"\n          value={stageViewPosition}\n          onChange={handlePositionChange}\n          disabled={mainViewVisibility === MainViewVisibility.STAGES_ONLY}\n        >\n          <option value={StageViewPosition.TOP}>Top</option>\n          <option value={StageViewPosition.LEFT}>Left</option>\n        </select>\n      </label>\n      <div className=\"jenkins-dropdown__separator\" />\n    </>\n  );\n}\n\nfunction ViewIcon({\n  mainViewVisibility,\n  stageViewPosition,\n}: {\n  mainViewVisibility: MainViewVisibility;\n  stageViewPosition: StageViewPosition;\n}) {\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n          <line x1=\"184\" y1=\"180\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"left\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"150\" y1=\"100\" x2=\"150\" y2=\"420\" />\n          <line x1=\"280\" y1=\"100\" x2=\"280\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (\n    mainViewVisibility === \"stagesOnly\" ||\n    (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"left\")\n  ) {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"184\" y1=\"100\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import \"./filter.scss\";\n\nimport Tippy from \"@tippyjs/react\";\nimport { useState } from \"react\";\n\nimport { useFilter } from \"../../pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { classNames } from \"../utils/classnames.ts\";\nimport { DefaultDropdownProps } from \"./dropdown.tsx\";\nimport StatusIcon from \"./status-icon.tsx\";\nimport Tooltip from \"./tooltip.tsx\";\n\nexport default function Filter({ disabled }: FilterProps) {\n  const [visible, setVisible] = useState(false);\n  const { visibleStatuses, toggleStatus, resetStatuses, allVisible } =\n    useFilter();\n\n  const statuses = [\n    {\n      key: \"running\",\n      text: \"Running\",\n      status: Result.running,\n    },\n    {\n      key: \"success\",\n      text: \"Successful\",\n      status: Result.success,\n    },\n    {\n      key: \"failure\",\n      text: \"Failed\",\n      status: Result.failure,\n    },\n    {\n      key: \"unstable\",\n      text: \"Unstable\",\n      status: Result.unstable,\n    },\n    {\n      key: \"aborted\",\n      text: \"Aborted\",\n      status: Result.aborted,\n    },\n    {\n      key: \"skipped\",\n      text: \"Skipped\",\n      status: Result.skipped,\n    },\n    {\n      key: \"not_built\",\n      text: \"Not built\",\n      status: Result.not_built,\n    },\n  ];\n\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"Filter\"}>\n      <Tippy\n        {...DefaultDropdownProps}\n        visible={visible}\n        onClickOutside={hide}\n        placement=\"bottom\"\n        appendTo={document.body}\n        offset={[0, -1]}\n        content={\n          <div className=\"jenkins-dropdown\" data-testid=\"filter-dropdown\">\n            <div className=\"jenkins-dropdown__heading\">\n              Filter\n              {!allVisible && (\n                <button\n                  className={\n                    \"jenkins-button jenkins-button--tertiary jenkins-!-accent-color pgv-reset-button\"\n                  }\n                  onClick={resetStatuses}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n            {statuses.map((item, index) => (\n              <button\n                key={index}\n                className={classNames(\n                  \"jenkins-dropdown__item\",\n                  \"pgv-filter-button\",\n                  {\n                    \"pgv-filter-button--unchecked\": !visibleStatuses.includes(\n                      item.status,\n                    ),\n                  },\n                )}\n                onClick={() => toggleStatus(item.status)}\n              >\n                <div className=\"jenkins-dropdown__item__icon\">\n                  <StatusIcon\n                    status={item.status}\n                    skeleton={!visibleStatuses.includes(item.status)}\n                    percentage={0}\n                  />\n                </div>\n                {item.text}\n              </button>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={classNames(\n            \"jenkins-button\",\n            {\n              \"jenkins-button--tertiary\": allVisible,\n            },\n            {\n              \"jenkins-!-accent-color\": !allVisible,\n            },\n          )}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n          aria-label={\"Filter\"}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={!allVisible ? 42 : 36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\ninterface FilterProps {\n  disabled?: boolean;\n}\n","import \"./data-tree-view.scss\";\n\nimport {\n  memo,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport Filter from \"../../../common/components/filter.tsx\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  Result,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { useFilter } from \"./providers/filter-provider.tsx\";\n\nexport default function DataTreeView({\n  stages,\n  selected,\n  onNodeSelect,\n}: DataTreeViewProps) {\n  const { search, setSearch, visibleStatuses } = useFilter();\n  const filteredStages = filterStageTree(search, visibleStatuses, stages);\n\n  const handleSelect = useCallback(\n    (event: ReactMouseEvent, nodeId: string) => {\n      onNodeSelect(event, nodeId);\n    },\n    [onNodeSelect],\n  );\n\n  if (stages.length === 1 && stages[0].placeholder) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div className={\"pgw-filter-bar\"}>\n        <div className=\"jenkins-search\">\n          <div className=\"jenkins-search__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M221.09 64a157.09 157.09 0 10157.09 157.09A157.1 157.1 0 00221.09 64z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n              />\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n                d=\"M338.29 338.29L448 448\"\n              />\n            </svg>\n          </div>\n          <input\n            className=\"jenkins-input jenkins-search__input\"\n            placeholder=\"Search\"\n            type=\"search\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck=\"false\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <Filter />\n      </div>\n\n      {filteredStages.length === 0 && (\n        <div className={\"jenkins-notice\"}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n          <div>No stages</div>\n        </div>\n      )}\n\n      <ol className={\"pgv-tree\"} role=\"tree\" aria-label={\"Pipeline Stages\"}>\n        {filteredStages.map((stage) => (\n          <TreeNode\n            key={stage.id}\n            stage={stage}\n            selected={String(selected)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </ol>\n    </div>\n  );\n}\n\nconst TreeNode = memo(function TreeNode({\n  stage,\n  selected,\n  onSelect,\n}: TreeNodeProps) {\n  const { search, visibleStatuses, allVisible } = useFilter();\n  const hasChildren = stage.children && stage.children.length > 0;\n  const isSelected = String(stage.id) === selected;\n  const [isExpanded, setIsExpanded] = useState<boolean>(\n    hasSelectedDescendant(stage),\n  );\n\n  function hasSelectedDescendant(stage: StageInfo): boolean {\n    return stage.children?.some(\n      (child) => String(child.id) === selected || hasSelectedDescendant(child),\n    );\n  }\n\n  const handleToggleClick = (e: ReactMouseEvent) => {\n    e.stopPropagation();\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    if (hasSelectedDescendant(stage)) {\n      setIsExpanded(true);\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (search.length || !allVisible) {\n      if (filterStageTree(search, visibleStatuses, [stage]).length !== 0) {\n        setIsExpanded(true);\n      }\n    }\n  }, [search, visibleStatuses, allVisible]);\n\n  return (\n    <li\n      className=\"pgv-tree-stage\"\n      role={\"treeitem\"}\n      {...(hasChildren ? { \"aria-expanded\": isExpanded } : {})}\n      aria-selected={isSelected}\n      aria-labelledby={`stage-${stage.id}-name`}\n    >\n      <div className=\"pgv-tree-item-container\">\n        <a\n          href={`?selected-node=` + stage.id}\n          onClick={(e) => {\n            // Only prevent left clicks\n            if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n              return;\n            }\n\n            e.preventDefault();\n\n            history.replaceState({}, \"\", `?selected-node=` + stage.id);\n            if (!isSelected) {\n              onSelect(e, String(stage.id));\n            }\n            setIsExpanded(!isExpanded);\n          }}\n          className={classNames(\"pgv-tree-item\", {\n            \"pgv-tree-item--active\": isSelected,\n            \"pgv-tree-item--skeleton\": stage.skeleton,\n          })}\n          aria-labelledby={`stage-${stage.id}-name`}\n        >\n          <div className={\"pgv-tree-item__content\"}>\n            <div className=\"pgv-status-icon\">\n              <StatusIcon\n                status={stage.state}\n                percentage={stage.completePercent}\n                skeleton={stage.skeleton}\n              />\n            </div>\n            <div className={\"pgv-tree-item__info\"}>\n              <div\n                className=\"pgv-tree-item__name\"\n                id={`stage-${stage.id}-name`}\n              >\n                <span className={\"jenkins-visually-hidden\"}>Stage </span>\n                {stage.name}\n              </div>\n              <div className=\"pgv-tree-item__description\">\n                <Total ms={stage.totalDurationMillis} />\n              </div>\n            </div>\n          </div>\n        </a>\n        {hasChildren && (\n          <button\n            className={classNames(\"pgv-tree-item__toggle\", {\n              \"pgv-tree-item__toggle--active\": isExpanded,\n            })}\n            onClick={handleToggleClick}\n            aria-label={`${isExpanded ? \"Collapse\" : \"Expand\"} ${stage.name}`}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"pgv-tree-children\">\n          <ol\n            role={\"group\"}\n            aria-label={`Stages in ${stage.name}`}\n            className={\"pgv-tree\"}\n          >\n            {stage.children.map((child) => (\n              <TreeNode\n                key={child.id}\n                stage={child}\n                selected={selected}\n                onSelect={onSelect}\n              />\n            ))}\n          </ol>\n        </div>\n      )}\n    </li>\n  );\n});\n\nconst filterStageTree = (\n  search: string,\n  visibleStatuses: Result[],\n  stages: StageInfo[],\n): StageInfo[] => {\n  return stages\n    .map((stage) => {\n      const filteredChildren = stage.children\n        ? filterStageTree(search, visibleStatuses, stage.children)\n        : [];\n\n      const matchesSelf =\n        stage.name.toLowerCase().includes(search.toLowerCase()) &&\n        visibleStatuses.includes(stage.state);\n\n      // Include this stage if it matches or has matching children\n      if (matchesSelf || filteredChildren.length > 0) {\n        return {\n          ...stage,\n          children: filteredChildren,\n        };\n      }\n\n      return null;\n    })\n    .filter((stage) => stage !== null);\n};\n\ninterface DataTreeViewProps {\n  stages: StageInfo[];\n  selected?: number;\n  onNodeSelect: (event: ReactMouseEvent, nodeId: string) => void;\n}\n\ninterface TreeNodeProps {\n  stage: StageInfo;\n  selected: string;\n  onSelect: (event: ReactMouseEvent, id: string) => void;\n}\n","// re-export Result so the relative path exists in one location.\nexport * from \"../../../common/RestClient.tsx\";\nexport type {\n  StageInfo,\n  StageType,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nexport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nexport const LOG_FETCH_SIZE = 150 * 1024;\nexport const POLL_INTERVAL = 1000;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport useRunPoller from \"../../../../common/tree-api.ts\";\nimport {\n  getConsoleTextOffset,\n  getRunSteps,\n  LOG_FETCH_SIZE,\n  POLL_INTERVAL,\n  Result,\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../PipelineConsoleModel.tsx\";\n\nexport function useStepsPoller(props: RunPollerProps) {\n  const { run, loading } = useRunPoller({\n    currentRunPath: props.currentRunPath,\n    previousRunPath: props.previousRunPath,\n  });\n\n  const [openStage, setOpenStage] = useState(\"\");\n  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);\n  const [steps, setSteps] = useState<StepInfo[]>([]);\n  const [stepBuffers, setStepBuffers] = useState(\n    new Map<string, StepLogBufferInfo>(),\n  );\n  const [userManuallySetNode, setUserManuallySetNode] = useState(false);\n\n  const stepsRef = useRef<StepInfo[]>([]);\n\n  const updateStepConsoleOffset = useCallback(\n    async (stepId: string, forceUpdate: boolean, startByte: number) => {\n      const stepBuffer = stepBuffers.get(stepId) ?? {\n        lines: [],\n        startByte: 0 - LOG_FETCH_SIZE,\n        endByte: -1,\n        stepId,\n      };\n      if (stepBuffer.startByte > 0 && !forceUpdate) return;\n      const response = await getConsoleTextOffset(stepId, startByte);\n      if (!response) return;\n\n      const newLogLines = response.text.trim().split(\"\\n\") || [];\n\n      if (stepBuffer.endByte > 0 && stepBuffer.endByte <= startByte) {\n        stepBuffer.lines = [...stepBuffer.lines, ...newLogLines];\n      } else {\n        stepBuffer.lines = newLogLines;\n        stepBuffer.startByte = response.startByte;\n      }\n\n      stepBuffer.endByte = response.endByte;\n\n      setStepBuffers((prev) => new Map(prev).set(stepId, stepBuffer));\n    },\n    [],\n  );\n\n  const parseUrlParams = useCallback(\n    (steps: StepInfo[]): boolean => {\n      const params = new URLSearchParams(document.location.search.substring(1));\n      let selected = params.get(\"selected-node\");\n      if (!selected) {\n        return false;\n      }\n\n      setUserManuallySetNode(true);\n\n      const step = steps.find((s) => s.id === selected);\n      const expanded: string[] = [];\n\n      if (step) {\n        selected = step.stageId;\n        expanded.push(step.id);\n\n        updateStepConsoleOffset(\n          step.id,\n          false,\n          parseInt(params.get(\"start-byte\") || `${0 - LOG_FETCH_SIZE}`),\n        );\n      }\n\n      setOpenStage(selected);\n      setExpandedSteps(expanded);\n      return true;\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getDefaultSelectedStep = (steps: StepInfo[]) => {\n    if (userManuallySetNode) {\n      return;\n    }\n\n    let selectedStep = steps.find((step) => step !== undefined);\n    if (!steps || steps.length === 0 || !selectedStep) {\n      return null;\n    }\n    for (const step of steps) {\n      const stepResult = step.state.toLowerCase() as Result;\n      const selectedStepResult = selectedStep?.state.toLowerCase() as Result;\n      switch (stepResult) {\n        case Result.running:\n        case Result.queued:\n        case Result.paused:\n          // Return first running/queued/paused step.\n          return step;\n        case Result.unstable:\n        case Result.failure:\n        case Result.aborted:\n          if (\n            run?.complete &&\n            selectedStepResult &&\n            stepResult < selectedStepResult\n          ) {\n            // If the run is complete return first unstable/failed/aborted step which has a state worse\n            // than the selectedStep.\n            // E.g. if the first step state is failure we want to return that over a later unstable step.\n            return step;\n          }\n          continue;\n        default:\n          // Otherwise select the step with the worst result with the largest id - e.g. (last step if all successful).\n          if (selectedStepResult && stepResult <= selectedStepResult) {\n            selectedStep = step;\n          }\n      }\n    }\n    return selectedStep;\n  };\n\n  useEffect(() => {\n    getRunSteps()\n      .then((steps) => {\n        steps = steps || [];\n        setSteps(steps);\n\n        const usedUrl = parseUrlParams(steps);\n        if (!usedUrl) {\n          const defaultStep = getDefaultSelectedStep(steps);\n          if (defaultStep) {\n            setOpenStage(defaultStep.stageId);\n\n            if (defaultStep.stageId) {\n              setExpandedSteps((prev) => [...prev, defaultStep.id]);\n              updateStepConsoleOffset(\n                defaultStep.id,\n                false,\n                0 - LOG_FETCH_SIZE,\n              );\n            }\n          }\n        }\n\n        if (!run?.complete) {\n          startPollingPipeline({\n            getStateUpdateFn: getRunSteps,\n            onData: (data) => {\n              const hasNewSteps =\n                JSON.stringify(stepsRef.current) !== JSON.stringify(data);\n\n              if (userManuallySetNode) {\n                const defaultStep = getDefaultSelectedStep(steps);\n                if (defaultStep) {\n                  setOpenStage(defaultStep.stageId);\n\n                  if (defaultStep.stageId) {\n                    setExpandedSteps((prev) => [...prev, defaultStep.id]);\n                    updateStepConsoleOffset(\n                      defaultStep.id,\n                      false,\n                      0 - LOG_FETCH_SIZE,\n                    );\n                  }\n                }\n              }\n\n              if (hasNewSteps) {\n                setSteps(data);\n                stepsRef.current = data;\n              }\n            },\n            checkComplete: () => !run?.complete,\n            interval: POLL_INTERVAL,\n          });\n        }\n        return null;\n      })\n      .catch((error) => {\n        console.error(\"Error in getRunSteps:\", error);\n      });\n  }, [run?.stages]);\n\n  const handleStageSelect = useCallback(\n    (nodeId: string) => {\n      setUserManuallySetNode(true);\n\n      if (!nodeId) return;\n      if (nodeId === openStage) return; // skip if already selected\n\n      const stepsForStage = steps.filter((step) => step.stageId === nodeId);\n      const lastStep = stepsForStage[stepsForStage.length - 1];\n      const newlyExpandedSteps = lastStep ? [lastStep.id] : [];\n\n      history.replaceState({}, \"\", `?selected-node=` + nodeId);\n\n      setOpenStage(nodeId);\n      setExpandedSteps((prev) => [...prev, ...newlyExpandedSteps]);\n\n      if (lastStep) {\n        updateStepConsoleOffset(lastStep.id, false, 0 - LOG_FETCH_SIZE);\n      }\n    },\n    [openStage, steps, updateStepConsoleOffset],\n  );\n\n  const onStepToggle = (nodeId: string) => {\n    setUserManuallySetNode(true);\n    if (!expandedSteps.includes(nodeId)) {\n      setExpandedSteps((prev) => [...prev, nodeId]);\n      updateStepConsoleOffset(nodeId, false, 0 - LOG_FETCH_SIZE);\n    } else {\n      setExpandedSteps((prev) => prev.filter((id) => id !== nodeId));\n    }\n  };\n\n  const onMoreConsoleClick = (nodeId: string, startByte: number) => {\n    updateStepConsoleOffset(nodeId, true, startByte);\n  };\n\n  const getStageSteps = (stageId: string) => {\n    return steps.filter((step) => step.stageId === stageId);\n  };\n\n  const getStageStepBuffers = (stageId: string) => {\n    const buffers = new Map<string, StepLogBufferInfo>();\n    steps.forEach((step) => {\n      if (step.stageId === stageId && stepBuffers.has(step.id)) {\n        buffers.set(step.id, stepBuffers.get(step.id)!);\n      }\n    });\n    return buffers;\n  };\n\n  const getOpenStage = (): StageInfo | null => {\n    const findStage = (stages: StageInfo[]): StageInfo | null => {\n      for (const stage of stages) {\n        if (String(stage.id) === openStage) return stage;\n        if (stage.children.length > 0) {\n          const result = findStage(stage.children);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    return openStage ? findStage(run?.stages || []) : null;\n  };\n\n  return {\n    openStage: getOpenStage(),\n    openStageSteps: getStageSteps(openStage),\n    openStageStepBuffers: getStageStepBuffers(openStage),\n    expandedSteps,\n    stages: run?.stages || [],\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    loading,\n  };\n}\n\n/**\n * Starts polling a function until a complete condition is met.\n */\nconst startPollingPipeline = ({\n  getStateUpdateFn,\n  onData,\n  checkComplete,\n  interval = 1000,\n}: {\n  getStateUpdateFn: () => Promise<StepInfo[] | null>;\n  onData: (data: StepInfo[]) => void;\n  checkComplete: (data: StepInfo[]) => boolean;\n  interval?: number;\n}): (() => void) => {\n  let polling = true;\n\n  const poll = async () => {\n    while (polling) {\n      const data = (await getStateUpdateFn()) || [];\n      onData(data);\n\n      if (checkComplete(data)) {\n        polling = false;\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, interval));\n    }\n  };\n\n  setTimeout(poll, interval);\n\n  return () => {\n    polling = false;\n  };\n};\n\ninterface RunPollerProps {\n  currentRunPath: string;\n  previousRunPath?: string;\n}\n","import { lazy, useEffect, useState } from \"react\";\n\nimport {\n  getConsoleBuildOutput,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../../../common/RestClient.tsx\";\nimport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nasync function fetchData(): Promise<StepLogBufferInfo> {\n  const consoleBuildOutput = await getConsoleBuildOutput();\n\n  return {\n    lines: consoleBuildOutput?.split(\"\\n\") ?? [],\n    startByte: 0,\n    endByte: 0,\n  };\n}\n\nexport function NoStageStepsFallback() {\n  const step: StepInfo = {\n    id: \"step-1\",\n    name: \"Step 1\",\n    title: \"Step 1 Title\",\n    state: Result.success,\n    completePercent: 100,\n    type: \"STEP\",\n    startTimeMillis: 0,\n    totalDurationMillis: 0,\n    stageId: \"\",\n    pauseDurationMillis: 0,\n  };\n\n  const [logBuffer, setLogBuffer] = useState<StepLogBufferInfo>();\n\n  useEffect(() => {\n    fetchData()\n      .then((data) => {\n        setLogBuffer(data);\n        return data;\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div className={\"pgv-stage-steps\"}>\n      <div className={\"pgv-step-detail-group\"}>\n        <ConsoleLogStream\n          logBuffer={logBuffer ?? { lines: [], startByte: 0, endByte: 0 }}\n          onMoreConsoleClick={() => {}}\n          step={step}\n          maxHeightScale={0.65}\n        />\n      </div>\n    </div>\n  );\n}\n","import \"./scroll-to-top-bottom.scss\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\n\nexport default function ScrollToTopBottom() {\n  const [isAtTop, setIsAtTop] = useState(true);\n  const [isAtBottom, setIsAtBottom] = useState(false);\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  useEffect(() => {\n    const updateScrollState = () => {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const docHeight = document.documentElement.scrollHeight;\n\n      const atTop = scrollTop <= 10;\n      const atBottom = scrollTop + windowHeight >= docHeight - 10;\n      const scrollable = docHeight > windowHeight + 10;\n\n      setIsAtTop(atTop);\n      setIsAtBottom(atBottom);\n      setIsScrollable(scrollable);\n\n      // Distance from bottom\n      const distanceFromBottom = docHeight - (scrollTop + windowHeight);\n\n      // Only trigger the offset if we're within 20px from the bottom\n      const offset = Math.max(0, Math.min(100, 100 - distanceFromBottom));\n\n      const root = document.documentElement;\n      root.style.setProperty(\"--pgv-offset-bottom\", `${offset}px`);\n    };\n\n    updateScrollState();\n\n    window.addEventListener(\"scroll\", updateScrollState);\n    window.addEventListener(\"resize\", updateScrollState);\n\n    const observer = new MutationObserver(updateScrollState);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateScrollState);\n      window.removeEventListener(\"resize\", updateScrollState);\n      observer.disconnect();\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n    });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n    });\n  };\n\n  return (\n    <div\n      className={classNames(`pgv-scroll-to-top-bottom`, {\n        \"pgv-scroll-to-top-bottom--visible\": isScrollable,\n      })}\n      aria-hidden={!isScrollable}\n    >\n      <button\n        onClick={scrollToTop}\n        className=\"jenkins-button\"\n        disabled={isAtTop}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 244l144-144 144 144M256 120v292\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={scrollToBottom}\n        className=\"jenkins-button\"\n        disabled={isAtBottom}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 268l144 144 144-144M256 392V100\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n}\n","import \"./split-view.scss\";\n\nimport {\n  Children,\n  MouseEvent as ReactMouseEvent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\n\nexport default function SplitView(props: SplitViewNewProps) {\n  const {\n    setTreeViewWidth,\n    setStageViewWidth,\n    setStageViewHeight,\n    treeViewWidth,\n    stageViewWidth,\n    stageViewHeight,\n  } = useLayoutPreferences();\n\n  const { direction = \"horizontal\", storageKey } = props;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const isVertical = direction === \"vertical\";\n\n  const initialSize = (() => {\n    if (storageKey === \"stages\") return treeViewWidth;\n    if (storageKey === \"graph\") {\n      return isVertical ? stageViewHeight : stageViewWidth;\n    }\n    return 300; // fallback\n  })();\n\n  useEffect(() => {\n    const newSize = (() => {\n      if (storageKey === \"stages\") return treeViewWidth;\n      if (storageKey === \"graph\") {\n        return direction === \"vertical\" ? stageViewHeight : stageViewWidth;\n      }\n      return 300;\n    })();\n\n    setPanelSize(newSize);\n  }, [direction, treeViewWidth, stageViewWidth, stageViewHeight, storageKey]);\n\n  const [panelSize, setPanelSize] = useState<number>(initialSize);\n\n  const dividerRef = useRef<HTMLDivElement>(null);\n\n  const startDragging = (e: ReactMouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  };\n\n  const stopDragging = () => setIsDragging(false);\n\n  const handleDragging = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    // Dynamically follow mouse based on direction\n    const newSize =\n      direction === \"vertical\"\n        ? e.clientY - getContainerOffset()\n        : e.clientX - getContainerOffset();\n\n    const clampedSize = Math.max(\n      direction === \"vertical\" ? 100 : 200,\n      Math.min(newSize, 1500),\n    );\n    setPanelSize(clampedSize);\n\n    // Update context sizes\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(clampedSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(clampedSize);\n      } else {\n        setStageViewWidth(clampedSize);\n      }\n    }\n  };\n\n  const handleDoubleClick = () => {\n    const resetSize = (() => {\n      if (storageKey === \"stages\") return 300;\n      if (storageKey === \"graph\") return isVertical ? 250 : 600;\n      return 300;\n    })();\n\n    setPanelSize(resetSize);\n\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(resetSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(resetSize);\n      } else {\n        setStageViewWidth(resetSize);\n      }\n    }\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getContainerOffset = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      return direction === \"vertical\" ? rect.top : rect.left;\n    }\n    return 0;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleDragging);\n    window.addEventListener(\"mouseup\", stopDragging);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleDragging);\n      window.removeEventListener(\"mouseup\", stopDragging);\n    };\n  });\n\n  // If we only have one child, just return it\n  const childrenArray = Children.toArray(props.children).filter(Boolean);\n  if (childrenArray.length === 1) {\n    return <>{childrenArray[0]}</>;\n  }\n\n  const gridTemplate =\n    direction === \"vertical\" ? `${panelSize}px 1fr` : `${panelSize}px 1fr`;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"pgv-split-view__container\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns:\n          direction === \"vertical\" ? undefined : gridTemplate,\n        gridTemplateRows: direction === \"vertical\" ? gridTemplate : undefined,\n      }}\n    >\n      <div\n        className={classNames(\"pgv-split-view__side-panel\", {\n          \"pgv-split-view__side-panel--vertical\": direction === \"vertical\",\n        })}\n      >\n        {childrenArray[0]}\n        <div\n          ref={dividerRef}\n          onMouseDown={startDragging}\n          onDoubleClick={handleDoubleClick}\n          className={`pgv-split-view__divider ${\n            direction === \"vertical\" ? \"pgv-split-view__divider--vertical\" : \"\"\n          }`}\n        />\n      </div>\n      <div>{childrenArray[1]}</div>\n    </div>\n  );\n}\n\ninterface SplitViewNewProps {\n  children: ReactNode[];\n  direction?: \"horizontal\" | \"vertical\";\n  storageKey: \"stages\" | \"graph\";\n}\n"],"file":"assets/PipelineConsole-Cld20ThY.js"}