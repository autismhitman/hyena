{"version":3,"mappings":";q4CAMMA,EAAyBC,gBAA+B,CAC5D,aAAc,EAChB,CAAC,EAEYC,EAA0B,CAAC,CACtC,SAAAC,CACF,IAEM,CACJ,MAAMC,EAAU,SAAS,cACvB,6BACF,EAGMC,EAAyB,CAC7B,eAHWD,GAAA,YAAAA,EAAS,UAAW,CAAC,GAGb,sBAAwB,MAC7C,EAEA,OACGE,MAAAN,EAAA,CAAuB,MAAOK,EAAQ,SAAAF,CAAS,EAEpD,EAEaI,EAAqB,IAChCC,aAAWR,CAAsB,ECjB7BS,EAAgBR,gBAA6C,MAAS,EAEtES,EAA4B,CAChCC,EAAO,QACPA,EAAO,QACPA,EAAO,QACPA,EAAO,SACPA,EAAO,QACPA,EAAO,QACPA,EAAO,SACT,EAEaC,EAAiB,CAAC,CAAE,SAAAT,KAAwC,CACvE,KAAM,CAACU,EAAiBC,CAAkB,EAAIC,WAAmB,EAAE,EAC7D,CAACC,EAAQC,CAAS,EAAIF,WAAS,EAAE,EAEjCG,EAAgBC,GAAgB,CAChCN,EAAgB,SAASM,CAAa,EACxCL,EAAmBD,EAAgB,OAAQO,GAAMA,IAAOD,CAAc,CAAC,EAEvEL,EAAmB,CAAC,GAAGD,EAAiBM,CAAa,CAAC,CAE1D,EAEME,EAAgB,IAAM,CAC1BP,EAAmB,EAAE,CACvB,EAGE,OAAAR,EAAA,IAACG,EAAc,SAAd,CACC,MAAO,CACL,gBACEI,EAAgB,OAAS,EAAIA,EAAkBH,EACjD,aAAAQ,EACA,cAAAG,EACA,YACGR,EAAgB,OAAS,EAAIA,EAAkBH,GAC7C,SAAWA,EAAgB,OAChC,OAAAM,EACA,UAAAC,CACF,EAEC,SAAAd,CAAA,CACH,CAEJ,EAEamB,EAAY,IAAyB,CAC1C,MAAAC,EAAUf,aAAWC,CAAa,EACxC,GAAI,CAACc,EACG,UAAI,MAAM,gDAAgD,EAE3D,OAAAA,CACT,ECvDMC,EAAkBC,EAAA,KACtB,IAAAC,EAAA,IAAM,OAAO,sCAA6C,+CAC5D,EAEA,SAAwBC,GAAM,CAC5B,MAAMC,EAAS,SAAS,eAAe,uBAAuB,EAAG,QAC9D,WAED,OAAAtB,MAACJ,GACC,SAACI,EAAA,IAAAuB,EAAA,CAAe,OAAAD,EACd,SAACtB,MAAAwB,EAAA,CAAa,QAAS,CAACC,EAAmB,QAAQ,EACjD,SAACzB,EAAA,IAAAM,EAAA,CACC,eAACoB,EACC,UAAA1B,EAAA,IAACkB,GAAgB,EACnB,EACF,EACF,EACF,GACF,CAEJ,CC3BA,MAAMS,EAAc,SAAS,eAAe,uBAAuB,EACnE,GAAI,CAACA,EAAmB,UAAI,MAAM,iCAAiC,EACnE,MAAMC,EAAOC,aAAWF,CAAW,EAGnCC,EAAK,OAAQ5B,MAAAqB,EAAA,CAAI,EAAE","names":["UserPermissionsContext","createContext","UserPermissionsProvider","children","element","perms","jsx","useUserPermissions","useContext","FilterContext","defaultStatuses","Result","FilterProvider","visibleStatuses","setVisibleStatuses","useState","search","setSearch","toggleStatus","key","s","resetStatuses","useFilter","context","PipelineConsole","lazy","__vitePreload","App","locale","LocaleProvider","I18NProvider","ResourceBundleName","LayoutPreferencesProvider","rootElement","root","createRoot"],"ignoreList":[],"sources":["../../../frontend/common/user/user-permission-provider.tsx","../../../frontend/pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx","../../../frontend/pipeline-console-view/app.tsx","../../../frontend/pipeline-console-view/index.tsx"],"sourcesContent":["import { createContext, ReactNode, useContext } from \"react\";\n\ninterface UserPermissions {\n  canConfigure: boolean;\n}\n\nconst UserPermissionsContext = createContext<UserPermissions>({\n  canConfigure: false,\n});\n\nexport const UserPermissionsProvider = ({\n  children,\n}: {\n  children: ReactNode;\n}) => {\n  const element = document.querySelector(\n    \"[data-module='permissions']\",\n  ) as HTMLTemplateElement;\n  const data = element?.dataset ?? {};\n\n  const perms: UserPermissions = {\n    canConfigure: data.permissionConfigure === \"true\",\n  };\n\n  return (\n    <UserPermissionsContext value={perms}>{children}</UserPermissionsContext>\n  );\n};\n\nexport const useUserPermissions = (): UserPermissions =>\n  useContext(UserPermissionsContext);\n","import { createContext, ReactNode, useContext, useState } from \"react\";\n\nimport { Result } from \"../../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\ninterface FilterContextType {\n  visibleStatuses: Result[];\n  toggleStatus: (key: Result) => void;\n  resetStatuses: () => void;\n  allVisible: boolean;\n  search: string;\n  setSearch: (value: string) => void;\n}\n\nconst FilterContext = createContext<FilterContextType | undefined>(undefined);\n\nconst defaultStatuses: Result[] = [\n  Result.running,\n  Result.success,\n  Result.failure,\n  Result.unstable,\n  Result.aborted,\n  Result.skipped,\n  Result.not_built,\n];\n\nexport const FilterProvider = ({ children }: { children: ReactNode }) => {\n  const [visibleStatuses, setVisibleStatuses] = useState<Result[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  const toggleStatus = (key: Result) => {\n    if (visibleStatuses.includes(key as Result)) {\n      setVisibleStatuses(visibleStatuses.filter((s) => s !== (key as Result)));\n    } else {\n      setVisibleStatuses([...visibleStatuses, key as Result]);\n    }\n  };\n\n  const resetStatuses = () => {\n    setVisibleStatuses([]);\n  };\n\n  return (\n    <FilterContext.Provider\n      value={{\n        visibleStatuses:\n          visibleStatuses.length > 0 ? visibleStatuses : defaultStatuses,\n        toggleStatus,\n        resetStatuses,\n        allVisible:\n          (visibleStatuses.length > 0 ? visibleStatuses : defaultStatuses)\n            .length === defaultStatuses.length,\n        search,\n        setSearch,\n      }}\n    >\n      {children}\n    </FilterContext.Provider>\n  );\n};\n\nexport const useFilter = (): FilterContextType => {\n  const context = useContext(FilterContext);\n  if (!context) {\n    throw new Error(\"useFilter must be used within a FilterProvider\");\n  }\n  return context;\n};\n","import { lazy } from \"react\";\n\nimport {\n  I18NProvider,\n  LocaleProvider,\n  ResourceBundleName,\n} from \"../common/i18n/index.ts\";\nimport { UserPermissionsProvider } from \"../common/user/user-permission-provider.tsx\";\nimport { FilterProvider } from \"./pipeline-console/main/providers/filter-provider.tsx\";\nimport { LayoutPreferencesProvider } from \"./pipeline-console/main/providers/user-preference-provider.tsx\";\n\nconst PipelineConsole = lazy(\n  () => import(\"./pipeline-console/main/PipelineConsole.tsx\"),\n);\n\nexport default function App() {\n  const locale = document.getElementById(\"console-pipeline-root\")!.dataset\n    .userLocale!;\n  return (\n    <UserPermissionsProvider>\n      <LocaleProvider locale={locale}>\n        <I18NProvider bundles={[ResourceBundleName.messages]}>\n          <FilterProvider>\n            <LayoutPreferencesProvider>\n              <PipelineConsole />\n            </LayoutPreferencesProvider>\n          </FilterProvider>\n        </I18NProvider>\n      </LocaleProvider>\n    </UserPermissionsProvider>\n  );\n}\n","import { createRoot } from \"react-dom/client\";\n\nimport App from \"./app.tsx\";\n\nconst rootElement = document.getElementById(\"console-pipeline-root\");\nif (!rootElement) throw new Error(\"Failed to find the root element\");\nconst root = createRoot(rootElement);\n\n// Render App\nroot.render(<App />);\n"],"file":"pipeline-console-view-bundle.js"}